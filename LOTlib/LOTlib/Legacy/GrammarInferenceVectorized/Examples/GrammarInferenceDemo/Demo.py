"""
Simple demo of grammar parameter inference using a simple NumberGame grammar & data set.

Note:
    - this data set kind of sucks, so you might want to use a better one
    - the grammar only has multiples of 1 through 10

Example:
    python Demo.py -f DemoOutput --alpha 0.9 --iters 10000 --propose-scale 0.1 --skip 10 -v

"""
from optparse import OptionParser

from Model.Grammar import simple_grammar
from LOTlib.Inference.Samplers.MetropolisHastings import MHSampler
from LOTlib.Examples.NumberGame.GrammarInference.Model import GrammarHypothesisVectorized, NumberGameHypothesis, VectorSummary
from LOTlib.DataAndObjects import HumanData, FunctionData


def run(save_file, alpha, iters, propose_scale, propose_n, skip, summary_cap):
    # Faux data
    data = [
        HumanData(
            data=FunctionData(input=[2,4,6,8], output=[]),
            queries=(1, 20, 30, 48, 80, 99),
            responses=((1, 19), (17, 3), (15, 5), (19, 1), (20, 0), (2, 18))
        ),
        HumanData(
            data=FunctionData(input=[10, 40], output=[]),
            queries=(1, 20, 30, 48, 80, 99),
            responses=((1, 19), (20, 0), (20, 0), (2, 18), (19, 1), (2, 18))
        )
    ]


    # Enumerate all 'domain level' hypotheses generated by our grammar
    hypotheses = []
    for fn in simple_grammar.enumerate(d=10):
        h = NumberGameHypothesis(grammar=simple_grammar, domain=100, alpha=alpha)
        h.set_value(fn)
        h.compute_prior()
        hypotheses.append(h)

    grammar_h0 = GrammarHypothesisVectorized(simple_grammar, hypotheses,
                                             propose_scale=propose_scale, propose_n=propose_n)
    mh_grammar_sampler = MHSampler(grammar_h0, data, iters)
    mh_grammar_summary = VectorSummary(skip=skip, cap=summary_cap)

    print '^*'*60, '\nGenerating GrammarHypothesis Samples\n', '^*'*60

    # Initialize csv file
    mh_grammar_summary.csv_initfiles(save_file)

    # Sample GrammarHypotheses!
    for i, gh in enumerate(mh_grammar_summary(mh_grammar_sampler)):
        if (i % 10 == 0):
            print i, " ITERATIONS"
            print '\n', '#'*100

        # Save to CSV & print grammar rule values
        if (i % skip == 0):
            mh_grammar_summary.csv_appendfiles(save_file, data)
            for idx in grammar_h0.get_propose_idxs():
                print idx, '\t|  ', grammar_h0.rules[idx]

    mh_grammar_summary.pickle_summary(filename=save_file + '_summary.p')



if __name__ == "__main__":
    parser = OptionParser()

    # Where to save the stuff?
    parser.add_option("-f", "--save-file",
                      dest="save_file", type="string", default="GrammarDemoOutput",
                      help="Where to save the csv/pickle file? (no extension .csv/.p, just filename)")

    # NumberGameHypothesis param
    parser.add_option("-a", "--alpha",
                      dest="alpha", type="float", default=0.9,
                      help="Noise param for NumberGameHypotheses")

    # GrammarHypothesis params
    parser.add_option("-i", "--iters",
                      dest="iters", type="int", default=10000,
                      help="Number of samples to run per chain")
    parser.add_option("--propose-scale",
                      dest="propose_scale", type="float", default=0.1,
                      help="How large are our proposals?")
    parser.add_option("--propose-n",
                      dest="propose_n", type="int", default=1,
                      help="How many parameters do we propose to for each iteration?")

    # VectorSummary params
    parser.add_option("-s", "--skip",
                      dest="skip", type="int", default=10,
                      help="How often do we save csv files / record samples to pickled file?")
    parser.add_option("-c", "--cap",
                      dest="cap", type="int", default=10000,
                      help="VectorSummary will collect this many GrammarHypothesis samples")

    # Print stuff?
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose", default=False,
                      help="Print GrammarRule probabilities for each sample saved")

    (options, args) = parser.parse_args()

    run(save_file=options.save_file, alpha=options.alpha, iters=options.iters,
        propose_scale=options.propose_scale, propose_n=options.propose_n,
        skip=options.skip, summary_cap=options.cap)

