"""
Map output number (e.g. 8) to a number of yes/no's.  E.g. (10, 2) ~ (10 yes, 2 no).

"""
from LOTlib.DataAndObjects import FunctionData
from LOTlib.Examples.NumberGame.Model import *


"""
Toy data

"""
# ------------------------------------------------------------------------------------------------------------
# These ones have lots of input data.
#
#  Domain: [1,100]
#

toy_exp_1 = [
    # powers of 2:  {2^y}
    FunctionData(
        input=[2, 4, 16, 32, 64],
        output={8: (12, 0),
                9: (0, 12),
                10: (0, 12)}
    ),
    # {2^y}  U  {5}
    FunctionData(
        input=[2, 4, 5, 8, 16, 32, 64],
        output={8: (12, 0),
                9: (1, 11),
                10: (6, 6)}
    ),
    # {2^y}  U  {5y}
    FunctionData(
        input=[2, 4, 8, 16, 32, 64,
               5, 15, 20, 25, 30, 45, 50, 65, 80, 95],
        output={8: (12, 0),
                9: (1, 11),
                10: (12, 0)}
    )
]

toy_exp_2 = [
    # {2^y + 1}
    FunctionData(
        input=[1, 3, 7, 15, 31, 63],
        output={7: (12, 0),
                15: (12, 0),
                31: (12, 0),
                63: (12, 0),
                8: (0, 12),
                32: (0, 12),
                50: (0, 12)}
    )
]

toy_exp_3 = [
    # {2^y}
    FunctionData(
        input=[2, 4, 8, 16, 32, 64],
        output={8: (12, 0),
                16: (12, 0),
                32: (12, 0),
                64: (12, 0),
                7: (0, 12),
                31: (0, 12),
                53: (0, 12)}
    )
]

toy_single = [
    # {no rule, just 1 datum}   -->  human data emphasizes 2^n, with a little 2*n
    FunctionData(
        input=[2],
        output={7:  (2, 10),
                8:  (12, 0),
                16: (12, 0),
                20: (12, 0),
                30: (4,  8),
                32: (12, 0),
                50: (6,  6),
                63: (0, 12),
                64: (12, 0)}
    )
]

# ------------------------------------------------------------------------------------------------------------
# For testing GrammarHypothesis with 1 data point.
#
#  For example, with `toy_2n` we should see probs for the  [x -> x * const]  &  [const -> 2]  rules increase.
#
#  Domain: [1, 20]
#

# n  (all numbers)
toy_1n = [
    FunctionData(
        input=[1],
        output={1:  (12, 0),
                2:  (12, 0),
                3:  (12, 0),
                4:  (12, 0),
                5:  (12, 0),
                6:  (12, 0),
                7:  (12, 0),
                8:  (12, 0),
                9:  (12, 0),
                10: (12, 0),
                11: (12, 0),
                12: (12, 0),
                13: (12, 0),
                14: (12, 0),
                15: (12, 0),
                16: (12, 0),
                17: (12, 0),
                18: (12, 0),
                19: (12, 0),
                20: (12, 0)}
    )
]

# 2*n
toy_2n = [
    FunctionData(
        input=[2],
        output={2:  (12, 0),        # should be high with 2n
                4:  (12, 0),
                8:  (12, 0),
                6:  (12, 0),        # should be high with 2n OR 3n
                12: (12, 0),
                18: (12, 0),
                3:  (0, 12),
                9:  (0, 12),
                15: (0, 12),
                11: (0, 12),
                13: (0, 12),
                17: (0, 12)}
    )
]

# 3*n
toy_3n = [
    FunctionData(
        input=[3],
        output={3:  (12, 0),        # should be high with 3n
                6:  (12, 0),        # should be high with 2n OR 3n
                9:  (12, 0),
                12: (12, 0),
                15: (12, 0),
                18: (12, 0),
                1:  (0, 12),
                2:  (0, 12),
                4:  (0, 12),
                5:  (0, 12),
                7:  (0, 12),
                8:  (0, 12),
                10: (0, 12),
                11: (0, 12),
                13: (0, 12),
                14: (0, 12),
                16: (0, 12),
                17: (0, 12),
                19: (0, 12),
                20: (0, 12)}
    )
]

# 2^n
toy_2pown = [
    FunctionData(
        input=[2],
        output={2:  (12, 0),
                4:  (12, 0),
                8:  (12, 0),
                16: (12, 0),
                1:  (0, 12),
                3:  (0, 12),
                5:  (0, 12),
                6:  (0, 12),
                7:  (0, 12),
                9:  (0, 12),
                10: (0, 12),
                11: (0, 12),
                12: (0, 12),
                13: (0, 12),
                14: (0, 12),
                15: (0, 12),
                17: (0, 12),
                18: (0, 12),
                19: (0, 12),
                20: (0, 12)}
    )
]

# n^2
toy_npow2 = [
    FunctionData(
        input=[4],
        output={1:  (12, 0),
                4:  (12, 0),
                9:  (12, 0),
                16: (12, 0),
                2:  (0, 12),
                3:  (0, 12),
                5:  (0, 12),
                6:  (0, 12),
                7:  (0, 12),
                8:  (0, 12),
                10: (0, 12),
                11: (0, 12),
                12: (0, 12),
                13: (0, 12),
                14: (0, 12),
                15: (0, 12),
                17: (0, 12),
                18: (0, 12),
                19: (0, 12),
                20: (0, 12)}
    )
]

# 2*n + 1
toy_2np1 = [
    FunctionData(
        input=[7],
        output={3:  (12, 0),
                5:  (12, 0),
                7:  (12, 0),
                9:  (12, 0),
                11: (12, 0),
                13: (12, 0),
                15: (12, 0),
                17: (12, 0),
                19: (12, 0),
                1:  (0, 12),
                2:  (0, 12),
                4:  (0, 12),
                6:  (0, 12),
                8:  (0, 12),
                10: (0, 12),
                12: (0, 12),
                14: (0, 12),
                16: (0, 12),
                18: (0, 12),
                20: (0, 12)}
    )
]

# 2^n + 1
toy_2pownp1 = [
    FunctionData(
        input=[17],
        output={3:  (12, 0),        # (2) + 1
                5:  (12, 0),        # (4) + 1
                9:  (12, 0),        # (8) + 1
                17: (12, 0),        # (16) + 1
                1:  (0, 12),
                2:  (0, 12),
                4:  (0, 12),
                6:  (0, 12),
                7:  (0, 12),
                8:  (0, 12),
                10: (0, 12),
                11: (0, 12),
                12: (0, 12),
                13: (0, 12),
                14: (0, 12),
                15: (0, 12),
                16: (0, 12),
                18: (0, 12),
                19: (0, 12),
                20: (0, 12)}
    )
]

# n^2 + 1
toy_npow2p1 = [
    FunctionData(
        input=[17],
        output={2:  (12, 0),        # (1) + 1
                5:  (12, 0),        # (4) + 1
                10: (12, 0),        # (9) + 1
                17: (12, 0),        # (16) + 1
                1:  (0, 12),
                3:  (0, 12),
                4:  (0, 12),
                6:  (0, 12),
                7:  (0, 12),
                8:  (0, 12),
                9:  (0, 12),
                11: (0, 12),
                12: (0, 12),
                13: (0, 12),
                14: (0, 12),
                15: (0, 12),
                16: (0, 12),
                18: (0, 12),
                19: (0, 12),
                20: (0, 12)}
    )
]

'''
                1:  (0, 12),
                2:  (0, 12),
                3:  (0, 12),
                4:  (0, 12),
                5:  (0, 12),
                6:  (0, 12),
                7:  (0, 12),
                8:  (0, 12),
                9:  (0, 12),
                10: (0, 12),
                11: (0, 12),
                12: (0, 12),
                13: (0, 12),
                14: (0, 12),
                15: (0, 12),
                16: (0, 12),
                17: (0, 12),
                18: (0, 12),
                19: (0, 12),
                20: (0, 12)}
'''

